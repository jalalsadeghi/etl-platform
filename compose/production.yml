version: "3.9"

services:
  postgres:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata_prod:/var/lib/postgresql/data
    networks: [webnet]

  app:
    build:
      context: ..
      dockerfile: docker/app/Dockerfile
    restart: always
    environment:
      APP_ENV: ${APP_ENV}
      APP_HOST: ${APP_HOST}
      APP_PORT: ${APP_PORT}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
    depends_on: [postgres]
    networks: [webnet]

  nginx:
    image: nginx:1.27-alpine
    restart: always
    environment:
      SERVER_NAME: ${SERVER_NAME}
    ports:
      - "80:80"           # Step 2 will add 443 + certs
    volumes:
      - ../docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on: [app]
    networks: [webnet]

  redis:
    image: redis:7-alpine
    networks: [webnet]

  worker:
    build:
      context: ..
      dockerfile: docker/app/Dockerfile
    environment:
      REDIS_URL: redis://redis:6379/0
      # copy same APP_* and DB vars as "app"
      APP_ENV: ${APP_ENV}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      ETL_SOURCE_URL: ${ETL_SOURCE_URL}
      ETL_API_KEY: ${ETL_API_KEY}
    depends_on: [postgres, redis]
    command: ["python","-m","taskiq","worker","app.tasks.broker:broker","-m","app.tasks.etl_tasks"]
    networks: [webnet]

volumes:
  pgdata_prod:

networks:
  webnet:
